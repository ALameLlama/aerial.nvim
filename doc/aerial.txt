*aerial.txt*
*Aerial* *aerial* *aerial.nvim*
===============================================================================
CONTENTS                                                        *aerial-contents*

    1. Commands........................................|aerial-commands|
    2. Options.........................................|aerial-options|
    3. Functions.......................................|aerial-functions|
    4. FAQ.............................................|aerial-faq|

===============================================================================
COMMANDS                                                        *aerial-commands*

                                                                  *:AerialToggle*
:AerialToggle[!] [direction]
        Open or close the aerial window. [direction] can be either `left` or
        `right`. If without [!] the cursor will jump to the aerial window if
        it was opened.

                                                                    *:AerialOpen*
:AerialOpen[!] [direction]
        Open the aerial window. [direction] can be either `left` or `right`.
        If without [!] the cursor will jump to the aerial window.

                                                                   *:AerialClose*
:AerialClose
        Close the aerial window.

                                                                    *:AerialInfo*
:AerialInfo
        Print out debug info related to aerial.

                                                                    *:AerialNext*
:[count]AerialNext
        Jump forwards [count] symbols (default 1).

                                                                    *:AerialPrev*
:[count]AerialPrev
        Jump backwards [count] symbols (default 1).

                                                                  *:AerialNextUp*
:[count]AerialNextUp
        Jump up the tree [count] levels, moving forwards in the file
        (default 1).

                                                                  *:AerialPrevUp*
:[count]AerialPrevUp
        Jump up the tree [count] levels, moving backwards in the file
        (default 1).

                                                                      *:AerialGo*
:[count]AerialGo[!] [split]
        Jump to the [count] symbol (default 1). If with [!] and inside aerial
        window, the cursor will stay in the aerial window. [split] can be "v"
        to open a new vertical split, or "h" to open a horizontal split.
        [split] can also be a raw vim command, such as "belowright split".
        This command respects |switchbuf|=uselast

                                                                *:AerialTreeOpen*
:AerialTreeOpen[!]
        Expand the tree at the current location. If with [!] then will expand
        recursively.

                                                               *:AerialTreeClose*
:AerialTreeClose
        Collapse the tree at the current location. If with [!] then will
        collapse recursively.

                                                              *:AerialTreeToggle*
:AerialTreeToggle
        Toggle the tree at the current location. If with [!] then will toggle
        recursively.

                                                             *:AerialTreeOpenAll*
:AerialTreeOpenAll
        Expand all the tree nodes.

                                                            *:AerialTreeCloseAll*
:AerialTreeCloseAll
        Collapse all the tree nodes.

                                                           *:AerialTreeSyncFolds*
:AerialTreeSyncFolds
        Sync code folding with current tree state. This ignores the
        |g:aerial_link_tree_to_folds| setting.

===============================================================================
OPTIONS                                                          *aerial-options*

Note that the options can be specified individually as listed below, or in a
single dict. If using a single dict, remove the "aerial_" prefix.
>
    let g:aerial = {
        \ 'default_direction': 'left',
        \ 'min_width': 20,
    \}

g:aerial_backends                                             *g:aerial_backends*
  Priority list of preferred backends for aerial. Built-in backends are "lsp"
  and "treesitter". This can also be a |dict| mapping of filetypes. A key of
  "_" will be used as the default if the filetype is not present.
>
        let g:aerial_backends = {
            \ '_': ["lsp", "treesitter"],
            \ 'python': ["treesitter"],
            \ 'rust': ["lsp"],
        \}


g:aerial_close_behavior                                 *g:aerial_close_behavior*
    How to decide when to close the aerial window. Valid values are:
        persist       Remain open until manually closed
        close         Close once the original source file is no longer visible
                      in the tabpage
        auto          Stay open as long as there is a visible buffer to attach
                      to (default)
        global        Same as "persist", and will always show symbols for the
                      current buffer

g:aerial_default_bindings                             *g:aerial_default_bindings*
    If `false`, don't set up the default keybindings in the aerial buffer.

g:aerial_default_direction                           *g:aerial_default_direction*
    The default direction to open the window. Valid values are:
        left          Open the split to the left
        right         Open the split to the right
        prefer_left   Open to the left unless there are other windows left and
                      none to the right
        prefer_right  Open to the right unless there are other windows right
                      and none to the left (default)

g:aerial_placement_editor_edge                   *g:aerial_placement_editor_edge*
    If `true`, only open aerial at the far right/left of the editor. Default
    behavior will open aerial as far right/left as possible while remaining
    adjacent to a window containing the source buffer.

g:aerial_lsp_diagnostics_trigger_update *g:aerial_lsp_diagnostics_trigger_update*
    Call |vim.lsp.buf.document_symbol()| to update symbols whenenever the LSP
    client receives diagnostics. Default `true`.

g:aerial_filter_kind                                       *g:aerial_filter_kind*
    A list of all |SymbolKind| values to display. Set to `false` to show all
    symbols. Default is "Class", "Constructor", "Enum", "Function",
    "Interface", "Method", and "Struct". This can also be a |dict| mapping of
    filetypes. A key of "_" will be used as the default if the filetype is not
    present.
>
        let g:aerial_filter_kind = {
            \ '_': ["Class", "Function", "Interface", "Method", "Struct"],
            \ 'c': ["Namespace", "Function", "Struct", "Enum"],
        \}


g:aerial_highlight_mode                                 *g:aerial_highlight_mode*
    Valid values are "split_width", "full_width", "last", or "none".

        split_width   Each open buffer will have its cursor location marked in
                      the aerial buffer. Each line will only be partially
                      highlighted to indicate which window is at that location.
                      (default)
        full_width    Each open buffer will have its cursor location marked as
                      a full-width highlight in the aerial buffer.
        last          Only the most-recently focused window will have its
                      location marked in the aerial buffer.
        none          Do not show the cursor locations in the aerial window.

g:aerial_highlight_on_jump                           *g:aerial_highlight_on_jump*
    Briefly highlight the line jumped from |aerial.jump_to_loc()|. This value
    is the number of milliseconds the highlight remains active for (default
    300). It can also be set to `v:true` for the default, or `v:false` to
    disable the highlight.

g:aerial_link_folds_to_tree                         *g:aerial_link_folds_to_tree*
    When you fold code with |za|, |zo|, or |zc|, update the tree as well.
    Requires |g:aerial_manage_folds| to be enabled. Default `false`.

g:aerial_link_tree_to_folds                         *g:aerial_link_tree_to_folds*
    Update your code folds when you open/collapse symbols in the tree.
    Requires |g:aerial_manage_folds| to be enabled. Default `true`.

g:aerial_manage_folds                                     *g:aerial_manage_folds*
    If `true`, will automatically configure your windows to use the symbols
    tree for code folding. This is equivalent to setting 'foldmethod'=expr and
    'foldexpr'=aerial#foldexpr() (which you can set manually if you prefer).
        `true`    Use aerial's foldexpr
        `false`   Do not modify fold settings
        "auto"  Manage folds if your previous 'foldmethod' was "manual" (default)

g:aerial_max_width                                           *g:aerial_max_width*
    The maximum width of the aerial window. Default 40.

g:aerial_min_width                                           *g:aerial_min_width*
    The minimum width of the aerial window. Default 10. If you want to disable
    the dynamic resizing of the aerial window, set this to the same value as
    |g:aerial_man_width|.

g:aerial_nerd_font                                           *g:aerial_nerd_font*
    If true the default icons will use Nerd Font icons. Valid values are:
        `true`    Use Nerd Font icons
        `false`   Do not use Nerd Font icons
        "auto"  Use Nerd Font icons if nvim-web-devicons is installed (default)

g:aerial_open_automatic                                 *g:aerial_open_automatic*
    If `true`, open aerial automatically when entering a new buffer. This can
    be a boolean or a |dict| mapping of filetypes. A key of "_" will be used
    as the default if the filetype is not present.
>
        let g:aerial_open_automatic = {
            \ '_': v:true,
            \ 'python': v:false,
            \ 'rust': v:false,
        \}

g:aerial_open_automatic_min_lines             *g:aerial_open_automatic_min_lines*
    When |g:aerial_open_automatic| = `true`, you can set this value to only
    automatically open aerial on files greater than a certain length.

g:aerial_open_automatic_min_symbols         *g:aerial_open_automatic_min_symbols*
    When |g:aerial_open_automatic| = `true`, you can set this value to only
    automatically open aerial when there are at least this many document
    symbols.

g:aerial_post_jump_cmd                                   *g:aerial_post_jump_cmd*
    Run this command after jumping to a symbol. Set to '' to disable.
    Default "zvzz"

g:aerial_lsp_update_when_errors                 *g:aerial_lsp_update_when_errors*
    Update the aerial buffer even when your file has LSP errors. Default `true`.

g:aerial_treesitter_update_delay               *g:aerial_treesitter_update_delay*
    How long to wait (in ms) after a buffer change before updating.

g:aerial_icons                                                   *g:aerial_icons*
    A map of |SymbolKind| to icons. You can also specify "<Symbol>Collapsed"
    to change the icon when the tree is collapsed at this symbol, or
    "Collapsed" to specify a default collapsed icon.
>
        let g:aerial_icons = {
            \ 'Class'          : '';
            \ 'ClassCollapsed' : '喇';
            \ 'Function'       : '';
            \ 'Constant'       : '[c]'
            \ 'Collapsed'      : '▶';
        \}
<
                                                              *SymbolKind* *symbol*
A quick note on SymbolKind. An authoritative list of valid SymbolKinds can be
found in the LSP spec:
https://microsoft.github.io/language-server-protocol/specifications/specification-3-17/#symbolKind
A current list is below.

Array
Boolean
Class
Constant
Constructor
Enum
EnumMember
Event
Field
File
Function
Interface
Key
Method
Module
Namespace
Null
Number
Object
Operator
Package
Property
String
Struct
TypeParameter
Variable

===============================================================================
FUNCTIONS                                                      *aerial-functions*

aerial.on_attach({client}, [{opts}]                          *aerial.on_attach()*
    This must be called in the on_attach of your LSP client configuration. The
    {opts} dictionary can contain the following entries:

        preserve_callback    boolean. If true, will add to the
                             textDocument/documentSymbol callback instead of
                             replacing it.

aerial.open([{focus}], [{direction}])                             *aerial.open()*
    Open the aerial window for the current buffer. {focus} is a boolean that,
    if true, will also jump your cursor to the aerial buffer. {direction} can
    be either "left" or "right", to indicate which direction of vsplit to use
    (defaults to |g:aerial_default_direction|).

aerial.close()                                                   *aerial.close()*
    Close the aerial window for the current buffer.

aerial.toggle([{focus}], [{direction}])                         *aerial.toggle()*
    Same as |aerial.open()|, but will close the window if it is already open.

aerial.focus()                                                   *aerial.focus()*
    Jump to the aerial window for the current buffer if it exists.

aerial.is_open()                                               *aerial.is_open()*
    Returns true if the aerial window is open for the current buffer.

aerial.select([{opts}])                                         *aerial.select()*
    Jump to a specific symbol. {opts} is a table with the following optional
    keys:
        index    The symbol to jump to. If nil, will jump to the symbol under
                 the cursor (in the aerial buffer)
        split    Jump to the symbol in a new split. Can be "v" for vertical or
                 "h" for horizontal. Can also be a raw command to execute (e.g.
                 "belowright split")
        jump     If `false` and in the aerial window, do not leave the aerial
                 window. (Default `true`)

aerial.next([{step}])                                             *aerial.next()*
    Jump forwards or backwards {step} symbols (default 1). Use negative values
    to jump backwards.

aerial.up({direction}, [{count}])                                   *aerial.up()*
    Jump up the tree {count} levels (default 1). Direction should be -1 to
    move backwards, or 1 to move forwards.

aerial.tree_cmd({action}, [{opts}])                           *aerial.tree_cmd()*
    Perform an action on the symbol tree {action} can be one of the following
    values:

        open     Open the tree at the selected location
        close    Collapse the tree at the selected location
        toggle   Toggle the collapsed state at the selected location

    {opts} can be a table with the following optional keys:

        index    The index of the tree to perform the action on. Defaults to
                 cursor location.
        fold     If `false`, do not modify folds regardless of
                 |g:aerial_link_tree_to_folds| setting. (default `true`)
        recurse  If `true`, perform the action recursively on all children
                 (default `false`)
        bubble   If `true` and current symbol has no children, perform the
                 action on the nearest parent (default `true`)

aerial.tree_open_all()                                   *aerial.tree_open_all()*
    Expand all the tree nodes.

aerial.tree_close_all()                                 *aerial.tree_close_all()*
    Collapse all the tree nodes.

aerial.sync_folds()                                         *aerial.sync_folds()*
    Sync code folding with current tree state. This ignores the
    |g:aerial_link_tree_to_folds| setting.

===============================================================================
FAQ                                                                  *aerial-faq*

Q: When I open the aerial window, it's stuck loading forever     *aerial-loading*

A: See https://github.com/stevearc/aerial.nvim/issues/4 for discussion of
potential causes and debugging steps.

===============================================================================
vim:ft=help:et:ts=2:sw=2:sts=2:norl
